# Add an appendix which mathematically defines expressions

## Problem Description

With DWARF expressions becoming considerably more complicated with the
structures needed to support GPUs, several members of the DWARF for
GPUs working group felt that it would be helpful to formally define
the DWARF expression operators in a notation which could be
mechanically processed. This would allow both producers and consumers
to verify their implementations in relation to an objective
standard. However adding these formal definitions of operators to the
text of the spec itself is not in keeping with the style of the
existing standard.

It was decided that a Functional Programming language would be the
best way to represent the behavior of these operators. This would
allow the structure of the mathematics to be represented in a way that
could be executed by a simple interpreter.

## Proposal

### Add a new Appendix G

Add a new "Appendix G" Called "DWARF Expressions semantics
(Informative)" after "Appendix F" moving the subsequent apendices
further down the alphabet.

>  The exact behavior of some DWARF expression operators is not
>  precisely defined in the text of standard. Instead an informal
>  description of the behavior is given. This could lead to differing
>  interpretations by different tool devlopers. As an aid to tool
>  authors, a simple DWARF expression parser has been implemnted in
>  OCaml a functional programming language so that producers and
>  consumers can compare their implementation to an objective standard
>  of how the authors thought that expressions would be processed.
>
> At the time that the standard was published. The this code was
> tagged "dwarf-6.0". However, as behavioral semantic questions must
> be resolved, this code base will be kept up to date and hosted at:
> TBD.
>
> To run this program simply run

    $ utop
    <snip>
    utop # #use "dwarf-locstack.ml";;

